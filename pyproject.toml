# pyproject.toml

# =======================================================
# 1. [build-system] - 构建系统配置 (PEP 517/518)
# 告诉工具如何构建你的包。这里使用标准的 setuptools 后端。
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# =======================================================
# 2. [project] - 项目核心元数据 (PEP 621)
# 替代了 setup.py 中的大部分参数。
[project]
name = "nept"  # 你的包在 pip 上的名称
version = "1.0.1"          # 当前版本号 (后续应根据 MAJOR.MINOR.PATCH 规则更新)
description = "A comprehensive quantization engine for PyTorch."
readme = "README.md"       # 指向项目说明文件
requires-python = ">=3.8"  # 支持的最低 Python 版本
license = {text = "MIT"}   # 许可证信息

authors = [
  {name = "LiuHao", email = "hliu1997ac@163.com"},
]

classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# 运行时依赖项 (用户安装你的包时需要安装的库)
dependencies = [
    "torch>=2.0.0",
    "numpy",
    "pyyaml",
    "onnx",
]

# 可选依赖项 (用户可以通过 pip install your-package[dev] 来安装)
#[project.optional-dependencies]
#dev = [
#
#]

# =======================================================
# 3. [tool.setuptools] - setuptools 特有配置
# 关键：配置 src 布局，告诉 setuptools 在 'src' 目录中查找包
[tool.setuptools]
package-dir = {"" = "src"} # 让 setuptools 知道项目根目录下的 'src' 是真正的包目录

# 查找包的规则，在 'src' 目录中查找所有带 __init__.py 的子目录
[tool.setuptools.packages.find]
where = ["src"]

# =======================================================
# 4. [tool.<tool_name>] - 其他工具配置 (可选)
# 示例：配置 Black 代码格式化工具
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']